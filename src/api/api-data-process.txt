Everything that needs to happen between fetching from api.congress.gov to the final cache of that data.

1. Determine what data matters for a given route.
    a. A bill should gather most of its sub-routes immediately
    b. But a bills sub-route will only need its own data
    c. Recent bill listing needs to know some sub-routes of the bill they represent
    d. Overall, need to create functions that handle this 'translation'
2. In Parallel, ask the cache for each route
    a. Spawn a thread
    b. Ask cache for the route, but don't save the return data
        1. Cache handles fetching, translating, and caching data
        2. All the data could already be cached before this point
    c. Join the thread
3. ask cache for each route cache


Another approach, multiple API's with specific purposes:
    1. Use api.congress.gov for general data/listings
        * Bill Breifs, Member Breifs, Listings, etc...
        * Has all the info needed to fetch detailed information
        * This info will not be updated as often
        * DO NOT use for detailed information
    2. Use api.ProPublica.org for detailed information
        * Instead of pulling individual items in api.congress.gov
        * Pull fully filled out info from API when needed
        * Pull updated information from here as needed
        * DO NOT use for general info/listings
    3. Both sources of data is placed in the database
        * Still keep the general separated from specific
        * Frequently udpated information might exist as json in the database
        * Consistent information would have its own table/columns

